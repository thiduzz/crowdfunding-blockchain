/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CampaignContract extends Truffle.Contract<CampaignInstance> {
  "new"(
    _valueGoal: number | BN | string,
    _manager: string,
    meta?: Truffle.TransactionDetails
  ): Promise<CampaignInstance>;
}

type AllEvents = never;

export interface CampaignInstance extends Truffle.ContractInstance {
  closed(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  manager(txDetails?: Truffle.TransactionDetails): Promise<string>;

  planIds(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  plans(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{ 0: BN; 1: BN; 2: string; 3: BN; 4: boolean }>;

  requestIds(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  requests(
    arg0: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    0: BN;
    1: string;
    2: BN;
    3: BN;
    4: string;
    5: BN;
    6: boolean;
    7: boolean;
  }>;

  valueGoal(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  approve: {
    (
      requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  executeRequest: {
    (
      requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      requestId: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  contribute: {
    (
      planIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      planIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      planIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      planIndex: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  createPlan: {
    (
      _id: number | BN | string,
      _amount: number | BN | string,
      _name: string,
      _votable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      _amount: number | BN | string,
      _name: string,
      _votable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      _amount: number | BN | string,
      _name: string,
      _votable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      _amount: number | BN | string,
      _name: string,
      _votable: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  close: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<string>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  createRequest: {
    (
      _id: number | BN | string,
      _name: string,
      _amount: number | BN | string,
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _id: number | BN | string,
      _name: string,
      _amount: number | BN | string,
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _id: number | BN | string,
      _name: string,
      _amount: number | BN | string,
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _id: number | BN | string,
      _name: string,
      _amount: number | BN | string,
      _destination: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getValue(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getPlanIds(txDetails?: Truffle.TransactionDetails): Promise<BN[]>;

  getRequestIds(txDetails?: Truffle.TransactionDetails): Promise<BN[]>;

  methods: {
    closed(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    manager(txDetails?: Truffle.TransactionDetails): Promise<string>;

    planIds(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    plans(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{ 0: BN; 1: BN; 2: string; 3: BN; 4: boolean }>;

    requestIds(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    requests(
      arg0: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      0: BN;
      1: string;
      2: BN;
      3: BN;
      4: string;
      5: BN;
      6: boolean;
      7: boolean;
    }>;

    valueGoal(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    approve: {
      (
        requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    executeRequest: {
      (
        requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        requestId: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    contribute: {
      (
        planIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        planIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        planIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        planIndex: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    createPlan: {
      (
        _id: number | BN | string,
        _amount: number | BN | string,
        _name: string,
        _votable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        _amount: number | BN | string,
        _name: string,
        _votable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        _amount: number | BN | string,
        _name: string,
        _votable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        _amount: number | BN | string,
        _name: string,
        _votable: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    close: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<string>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    createRequest: {
      (
        _id: number | BN | string,
        _name: string,
        _amount: number | BN | string,
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _id: number | BN | string,
        _name: string,
        _amount: number | BN | string,
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _id: number | BN | string,
        _name: string,
        _amount: number | BN | string,
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _id: number | BN | string,
        _name: string,
        _amount: number | BN | string,
        _destination: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getValue(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getPlanIds(txDetails?: Truffle.TransactionDetails): Promise<BN[]>;

    getRequestIds(txDetails?: Truffle.TransactionDetails): Promise<BN[]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
