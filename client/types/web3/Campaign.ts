/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export interface Campaign extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): Campaign;
  clone(): Campaign;
  methods: {
    manager(): NonPayableTransactionObject<string>;

    metadata(): NonPayableTransactionObject<{
      name: string;
      description: string;
      imageUrl: string;
      valueGoal: string;
      closed: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: boolean;
    }>;

    planIds(arg0: number | string | BN): NonPayableTransactionObject<string>;

    plans(arg0: number | string | BN): NonPayableTransactionObject<{
      id: string;
      amount: string;
      name: string;
      fundersCount: string;
      votable: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: boolean;
    }>;

    requestIds(arg0: number | string | BN): NonPayableTransactionObject<string>;

    requests(arg0: number | string | BN): NonPayableTransactionObject<{
      id: string;
      name: string;
      amount: string;
      necessaryApprovals: string;
      destination: string;
      approversCount: string;
      approved: boolean;
      executed: boolean;
      0: string;
      1: string;
      2: string;
      3: string;
      4: string;
      5: string;
      6: boolean;
      7: boolean;
    }>;

    approve(requestId: number | string | BN): PayableTransactionObject<void>;

    executeRequest(
      requestId: number | string | BN
    ): PayableTransactionObject<void>;

    contribute(planIndex: number | string | BN): PayableTransactionObject<void>;

    createPlan(
      _id: number | string | BN,
      _amount: number | string | BN,
      _name: string,
      _votable: boolean
    ): NonPayableTransactionObject<void>;

    close(): NonPayableTransactionObject<string>;

    createRequest(
      _id: number | string | BN,
      _name: string,
      _amount: number | string | BN,
      _destination: string
    ): NonPayableTransactionObject<void>;

    getValue(): NonPayableTransactionObject<string>;

    getPlanIds(): NonPayableTransactionObject<string[]>;

    getRequestIds(): NonPayableTransactionObject<string[]>;
  };
  events: {
    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };
}
